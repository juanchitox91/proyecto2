using Helper;
using Npgsql;
//using SGEA.DAL;
using SGEA.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace SGEA.Repository
{
    public class RolRepository
    {
        public static string connectionString = System.Configuration.ConfigurationManager.
                                     ConnectionStrings["SGEAContext"].ConnectionString;

        public static List<Rol> getRoles(string idInstitucion)
        {
            var rols = new List<Rol>();

            try
            {

                NpgsqlConnection cnn;
                cnn = new NpgsqlConnection(connectionString);
                cnn.Open();

                NpgsqlCommand command;
                NpgsqlDataReader dataReader;
                string sql, Output = string.Empty;

                sql = $"select r.id, r.nombre, u.nombre, r.esadministrador FROM dbo.rol r join dbo.institucion u on r.idinstitucion = u.id where r.idinstitucion = {idInstitucion}";
                command = new NpgsqlCommand(sql, cnn);
                dataReader = command.ExecuteReader();

                while (dataReader.Read())
                {
                    rols.Add(new Rol
                    {
                        ID = Convert.ToInt64(dataReader.GetValue(0).ToString()),
                        NombreRol = dataReader.GetValue(1).ToString(),
                        NombreInstitucion = dataReader.GetValue(2).ToString(),
                        EsAdministrador = dataReader.GetValue(3).ToString() == "1"
                    });
                }
            }
            catch (Exception)
            {

                throw;
            }

            return rols;
        }

        public static string createRol(Rol rol)
        {
            string mensaje = string.Empty;

            try
            {
                NpgsqlConnection cnn;
                cnn = new NpgsqlConnection(connectionString);
                cnn.Open();

                NpgsqlCommand command;
                string sql, Output = string.Empty;

                sql = $"insert into dbo.rol(nombre, idinstitucion)" +
                      $"values ('{rol.NombreRol}', '{rol.InstitucionID}')";

                command = new NpgsqlCommand(sql, cnn);
                command.ExecuteNonQuery();
                mensaje = "OK";
            }

            catch (Exception e)
            {
                mensaje = "Ha ocurrido un error al insertar el usuario.";
            }

            return mensaje;
        }

        public static string deleteRol(long id)
        {
            string mensaje = string.Empty;

            try
            {
                NpgsqlConnection cnn;
                cnn = new NpgsqlConnection(connectionString);
                cnn.Open();

                NpgsqlCommand command;
                string sql, Output = string.Empty;

                sql = $"delete from dbo.rol u where u.id = {id}";

                command = new NpgsqlCommand(sql, cnn);
                command.ExecuteNonQuery();
                mensaje = "OK";
            }

            catch (Exception e)
            {
                mensaje = "Ha ocurrido un error al eliminar el usuario.";
            }

            return mensaje;
        }

        public static string updateRol(Rol rol)
        {
            string mensaje = string.Empty;

            try
            {
                NpgsqlConnection cnn;
                cnn = new NpgsqlConnection(connectionString);
                cnn.Open();

                NpgsqlCommand command;
                string sql, Output = string.Empty;

                sql = $"update dbo.rol set nombre = '{rol.NombreRol}'" +
                      $"where id = {rol.ID}";

                command = new NpgsqlCommand(sql, cnn);
                command.ExecuteNonQuery();
                mensaje = "OK";
            }

            catch (Exception e)
            {
                mensaje = "Ha ocurrido un error al insertar el usuario.";
            }

            return mensaje;
        }

        public static List<SelectListItem> getRolesSelect2(string idInstitucion, string id)
        {
            var roles = new List<SelectListItem>();

            try
            {

                NpgsqlConnection cnn;
                cnn = new NpgsqlConnection(connectionString);
                cnn.Open();

                NpgsqlCommand command;
                NpgsqlDataReader dataReader;
                string sql, Output = string.Empty;

                sql = $"select  r.id, r.nombre FROM dbo.rol r where r.idinstitucion = {idInstitucion}";
                command = new NpgsqlCommand(sql, cnn);
                dataReader = command.ExecuteReader();

                roles.Add(new SelectListItem
                {
                    Value = "",
                    Text = "Seleccione un valor",
                    Selected = id == "0" ? true : false
                });

                while (dataReader.Read())
                {
                    roles.Add(new SelectListItem
                    {
                        Value = dataReader.GetValue(0).ToString(),
                        Text = dataReader.GetValue(1).ToString(),
                        Selected = dataReader.GetValue(0).ToString() == id ? true : false
                    });
                };
            }
            catch (Exception)
            {

                //return resultado;
            };
            return roles;
        }

        public static List<Accion> getAccionesPorRoles(long idusuario)
        {
            var acciones = new List<Accion>();
            var longid = Convert.ToInt64(idusuario);
            try
            {

                NpgsqlConnection cnn;
                cnn = new NpgsqlConnection(connectionString);
                cnn.Open();

                NpgsqlCommand command;
                NpgsqlDataReader dataReader;
                string sql, Output = string.Empty;

                /*
                    select a.nombre, case when
                        (select count(1) from dbo.accionrol ar join dbo.rol r on ar.idrol = r.id join dbo.usuario u on r.id = u.idrol where (ar.idaccion = a.id and 
                        u.id = 10) or 
	                        (select count(1) 
	                                            from dbo.rol r join dbo.usuario u on r.id = u.idrol
	                                            where u.id = 10 and r.esadministrador = 1) > 0
                        )
                         > 0 then 'SI' else 'NO' end ACTIVO
                    from dbo.accion a                 
                 */

                sql = $"select a.id, a.nombre, a.descripcion, case when" +
                    $"(select count(1) from dbo.accionrol ar join dbo.rol r on ar.idrol = r.id where (ar.idaccion = a.id and  r.id ={longid}  and ar.activo) or" +
                    $"(select count(1) from dbo.rol r  where r.id = {longid} and r.esadministrador = 1) > 0)" +
                    $" > 0 then 'SI' else 'NO' end ACTIVO from dbo.accion a";

                command = new NpgsqlCommand(sql, cnn);
                dataReader = command.ExecuteReader();

                while (dataReader.Read())
                {
                    acciones.Add(
                         new Accion {
                         ID = Convert.ToInt64(dataReader.GetValue(0).ToString()),
                         NombreAccion =  dataReader.GetValue(1).ToString(),
                         Descripcion = dataReader.GetValue(2).ToString(),
                         Activo = dataReader.GetValue(3).ToString() == "SI" ? true : false
                         });
                }
            }
            catch (Exception)
            {
                throw;
            }

            return acciones;
        }

        public static string GuardarPermisos(List<Accion> lista, string idrol)
        {
            string mensaje = "OK"; 
            foreach(var item in lista)
            {
                //primero verificamos si ya existe la accion relacionada al rol
                var existe = verificarpermiso(item.NombreAccion, idrol);

                if(existe == 0 && item.Activo)
                {
                    //aca insertamos
                    mensaje = agregarPermiso( idrol, item.ID.ToString());
                }
                else
                {
                    //aca modificamos
                    mensaje = actualizarPermiso(idrol, item.ID.ToString(), item.Activo);
                }
            }

            return mensaje;
        }

        private static int verificarpermiso(string nombrepermiso, string idrol)
        {
            int cantidad = 0;

            NpgsqlConnection cnn;
            cnn = new NpgsqlConnection(connectionString);
            cnn.Open();

            NpgsqlCommand command;
            NpgsqlDataReader dataReader;
            string sql, Output = string.Empty;

            /*
                select count(*) from dbo.accion a join dbo.accionrol ar on a.id = ar.idaccion
                join dbo.rol r on ar.idrol = r.id where r.id = 1 
                and (a.nombre = 'verUsuarios'  or r.esadministrador = 1)
            */

            sql = $"select count(*) from dbo.accion a join dbo.accionrol ar on a.id = ar.idaccion " +
                $"join dbo.rol r on ar.idrol = r.id where r.id = {idrol}" +
                $"and (a.nombre = '{nombrepermiso}' or r.esadministrador = 1)";

            command = new NpgsqlCommand(sql, cnn);
            dataReader = command.ExecuteReader();


            while (dataReader.Read())
            {
                cantidad = Convert.ToInt32(dataReader.GetValue(0).ToString());
            }

            return cantidad;

        }

        private static string agregarPermiso(string idrol, string idaccion)
        {
            string mensaje = "ERROR";
            try
            {
                NpgsqlConnection cnn;
                cnn = new NpgsqlConnection(connectionString);
                cnn.Open();

                NpgsqlCommand command;
                string sql, Output = string.Empty;

                sql = $"insert into dbo.accionrol(idaccion, idrol)" +
                      $"values ('{idaccion}', '{idrol}')";

                command = new NpgsqlCommand(sql, cnn);
                command.ExecuteNonQuery();
                mensaje = "OK";
            }

            catch (Exception e)
            {
                mensaje = "Ha ocurrido un error al insertar el usuario.";
            }
            return mensaje;
        }

        private static string actualizarPermiso(string idrol, string idaccion, bool activo)
        {
            string mensaje = "ERROR";
            try
            {
                NpgsqlConnection cnn;
                cnn = new NpgsqlConnection(connectionString);
                cnn.Open();

                NpgsqlCommand command;
                string sql, Output = string.Empty;

                sql = $"update dbo.accionrol set activo = {activo} where idaccion = {idaccion} and idrol = {idrol}";

                command = new NpgsqlCommand(sql, cnn);
                command.ExecuteNonQuery();
                mensaje = "OK";
            }

            catch (Exception e)
            {
                mensaje = "Ha ocurrido un error al insertar el usuario.";
            }
            return mensaje;
        }
    }
}